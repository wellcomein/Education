package LEVEL_1.lesson_2;

import java.util.Arrays;
import java.util.Scanner;

public class Lesson2 {

    public static void main(String[] args) {
    // Для объявления одномерного массива обычно применяется следующая форма: тип_данных[] имя_массива = new тип_данных[размер_массива];
        int[] arr = new int[5];   // пример. создается массив типа int, состоящий из пяти элементов, а ссылка на него присваивается переменной arr

    // заполнить массив сразу при его создании: тип_данных[] имя_массива = {v1, v2, v3, ..., vN};
        int[] nums = { 5, 10, 15, 20 };
    // Распечатать одномерный массив в консоль можно, используя конструкцию вида:
        System.out.println(Arrays.toString(arr));
    // Выделяя память под многомерный массив, достаточно указать первый (крайний слева) размер. Память под остальные размеры массива можно выделять по отдельности:
        int[][] table = new int[3][];
        table[0] = new int[1];
        table[1] = new int[5];
        table[2] = new int[3];
    // Помимо общей формы для объявления массива можно пользоваться такой: тип_данных имя_массива[];
        int arr3[] = new int[3];
        int[] arr2 = new int[3];
    // При работе с массивами можно программно узнать их размер, воспользовавшись записью имя_массива.length

    // Цикл while работает до тех пор, пока указанное условие истинно.
        // while (условие) {
        //   набор_операторов;
        //}
// А сначала напишем функционал, который будет выводить все четные числа от 0 до числа N, вводимого пользователем:
        Scanner userInput = new Scanner(System.in);
        System.out.print("Введите ограничение: ");
        int limit = userInput.nextInt();

        int counter = 0;
        System.out.println("Список четных числел из заданного промежутка:");
        while(counter <= limit){
            if(counter % 2 == 0){
                System.out.println(counter);
            }
            counter++;
        }


        String[] sm = {"A", "B", "C", "D"};
        for (int i = 0; i < sm.length; i++) {
            System.out.print(sm[i] + " ");
        }
// Ниже одна и таже запись и делающая тоже самое
        String[] sn = {"A", "B", "C", "D"};
        for (String o : sn) {
            System.out.print(o + " ");
        // Проходим по элементам массива sn типа String, и каждому присваиваем временное имя o.
        // То есть «в единицу времени» o указывает на один элемент массива.
        }
        System.out.println("\nКонец первого примера");


// Ниже представлены вложенные массивы
// Создадим двумерный массив размером 3х4, заполним его числами от 1 до 12 и напечатаем в консоль в виде таблицы:
        int counter1 = 1;
        int[][] table1 = new int[3][4];
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 4; j++) {
                table1[i][j] = counter1;
                System.out.print(table1[i][j] + " ");
                counter1++;
            }
            System.out.println();
        }


/*
При работе с двумерными массивами и отладке можно пользоваться следующим методом для распечатки этого массива:
на вход метода подать ссылку на любой двумерный целочисленный массив.
При данной реализации первый индекс массива указывает на строку, второй — на столбец.

    public static void printArr(int[][] arr) {
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                System.out.print(arr[i][j]);
            }
            System.out.println();
            }
        }
*/
    }
}
