package Test;

import java.util.ArrayList;

public class Test2 {
    String question;
    String[] variants;
    Test2 (String question) {
        this.question = question;
    }
    public static void main(String[] args) {
        Test2 question1 = new Test2("Выберите верное утверждение");
        question1.variants = new String[]{
            "у перечислений не может быть конструктора",
            "у перечислений может быть конструктор с параметрами, и только с модификатором доступа private",
            "у перечислений имеется только конструктор по-умолчанию",
            "у перечислений может быть конструктор с параметрами, и любым модификатором доступа"
        };
    }
/*
//----------------------------------------------------------------------------------------------------
    Выберите верное утверждение
        - у перечислений не может быть конструктора
        - у перечислений может быть конструктор с параметрами, и только с модификатором доступа private
        - у перечислений имеется только конструктор по-умолчанию
        - у перечислений может быть конструктор с параметрами, и любым модификатором доступа
//----------------------------------------------------------------------------------------------------
    Какой метод отсутствует в классе Object?
        - clone()
        - finalize()
        - toString()
        - system()
//----------------------------------------------------------------------------------------------------
    Может ли блок try существовать без блока catch?
        - да
        - нет
//----------------------------------------------------------------------------------------------------
    Поля, объявленные в интерфейсах, по умолчанию имени модификаторы
        - public static
        - private static final
        - public static final
        - static final
//----------------------------------------------------------------------------------------------------
    Может ли HashМар хранить несколько записей с одинаковым ключом?
        - нет, при добавлении записи с таким же ключом, старое значение будет перезаписано
        - да, при выполнении метода get() вернется список значений, лежащих под указанным ключом
        - нет, при добавлении записи с таким же ключом будет сгенерировано исключение
//----------------------------------------------------------------------------------------------------
    Параметр loadFactor у отображения HashMap по-умолчанию равен:
        - 0.8
        - 1.0
        - 0.75
        - 0.5
//----------------------------------------------------------------------------------------------------
    Можно ли после запуска потока сделать его daemon-потоком?
        - да
        - нет
//----------------------------------------------------------------------------------------------------
    При условии, что во внешнем классе не создаются объекты внутреннего класса,
       и во внутреннем классе не создаются объекты внешнего, выберите верное утверждение
        - внутренний класс имеет доступ только к открытым полям внешнего класса,
        внешний класс имеет полный доступ ко всем полям и методам внутреннего
        - внутренний класс имеет доступ ко всем полям и методам внешнего класса,
        внешний класс не имеет прямого доступа к полям и методам внутреннего
        - внутренний класс имеет полный доступ ко всем полям и методам внешнего класса,
        внешний класс имеет полный доступ ко всем полям и методам внутреннего
        - и внутренний, и внешний классы имеют доступ только к статическим членам друг друга
//----------------------------------------------------------------------------------------------------
    Выберите верное утверждение
        public static void main(String[] args) {
            Thread t1 = new Thread(new Runnable() {
                @Override
                public void run() {
                    System. out. println(1);
                }
            });
            Thread t2 = new Thread(new Runnable() {
                @Override
                public void run() {
                    try {
                        t1. join();
                    } catch (InterruptedException e) {
                        e. printStackTrace();
                        System. out. println(2);
                    }
                }
            });
            t1.start();
            t2.start();
        }
        - один поток созданный с помощью анонимного класса, не может ожидать другой поток
        - в консоль гарантировано будет выведено 12
        - в консоль гарантировано будет выведено 21
        - 1 и 2 может быть выведено в любом порядке
//----------------------------------------------------------------------------------------------------
    При выполнении следующего кода
        public static void main(String[] args) {
            new Thread(new Runnable() {
                @0verride
                public void run() {
                    System. out. println(1);
                }
            }).start();
            new Thread(new Runnable() {
                @0verride
                public void run() {
                    System. out. println(2);
                }
            }).start();
        }
        - гарантированно будет отпечатано в порядке 1 2
        - нельзя гарантировать порядок вывода чисел 1 и 2
        - гарантированно будет отпечатано в порядке 2 1
        - печать не будет выполнена, так как не вызван метод run()
//----------------------------------------------------------------------------------------------------
    При завершении main-потока автоматически завершается выполнение программы
        - да
        - не всегда
//----------------------------------------------------------------------------------------------------
    Метод Thread.sleep()
        - приостанавливает работу потока, в котором был вызван без освобождения монитора
        - приостанавливает выполнение потока main
        - приостанавливает работу потока, в котором был вызван с освобождением монитора
        - приостанавливает выполнение всех потоков, кроме main
        - приостанавливает работу программы
//----------------------------------------------------------------------------------------------------
    LinkedHashSet хранит элементы в порядке
        - отсортированном по возрастанию hashCode()
        - добавления
        - отсортированном через compareTo()
        - случайном
//----------------------------------------------------------------------------------------------------
    Какой из методов не может привести к приостановке потока?
        - join()
        - wait()
        - notify()
        - sleep()
//----------------------------------------------------------------------------------------------------
    При создании объекта типа ArrayList в конструктор в качестве аргумента нельзя подать:
        - int
        - объект типа List
        - объект типа Collection
        - массив элементов
//----------------------------------------------------------------------------------------------------
    Запуск потоков возможен только из main-потока
        - нет
        - да
//----------------------------------------------------------------------------------------------------
    Выберите неверное утверждение
        - List, Map, Set являются интерфейсами
        - Мар не относится к коллекциям
        - List, Map, Set являются абстрактными классами
        - Классы коллекций находятся в пакете java.util
//----------------------------------------------------------------------------------------------------
    Назовите две группы исключений в Java.
        - Handled и Unhandled
        - Catched и Uncatched
        - Exception и Error
        - Checked и Unchecked
//----------------------------------------------------------------------------------------------------
    Можно ли запустить поток через объект типа Thread повторно, после его завершения?
        - да
        - нет
//----------------------------------------------------------------------------------------------------
    Можно ли в классе, унаследованном от классов исключений, объявлять методы и поля?
        - да
        - нет
//----------------------------------------------------------------------------------------------------
    Утверждение: статический внутренний (вложенный) класс имеет доступ только к
       статическим полям и методам внешнего класса
        - не верно
        - верно
//----------------------------------------------------------------------------------------------------
    Что будет результатом работы предложенного кода?
        public static void main(String[] args) {
            Thread t1 = new Thread(new Runnable()
                @Override
                public void run() {
                    System. out. println(1);
                }
            });
            Thread t = new Thread(t1);
            t.start();
        }
        - в консоль ничего не будет выведено
        - ошибка компиляции, невозможно в конструктор одного потока подать другой поток
        - в консоль будет выведено число 11
        - будет сгенерированно исключение RuntimeExeption
//----------------------------------------------------------------------------------------------------
    Выберите неверное утверждение
        - в HashSet элементы упорядочены по возрастанию
        - в HashSet хранятся только уникальные элементы
        - LinkedHashSet хранит элементы в порядке добавления
        - TreeSet представляет собой отсортированное множество
//----------------------------------------------------------------------------------------------------
    Исключение какого типа будет сгенерировано при выполнении следующего кода
            Object obj = new Integer(10);
            String str = (String) obj;
            System. out. println(str);
        - ни одно из представленных
        - IllegalArgumentException
        - ClassCastException
        - ArrayIndex0utOfBoundsException
//----------------------------------------------------------------------------------------------------
    Какое условие необходимо выполнить для использования класса в качестве ключа HashMap?
        - переопределить только метод hashCode()
        - переопределить методы hashCode() и equals()
        - реализовать интерфейс Serializable
        - переопределить только метод equals()
//----------------------------------------------------------------------------------------------------
    В каком классе или интерфейсе определены методы wait(), notify() и notifyAll()?
        - Runnable
        - Class
        - Thread
        - Object
//----------------------------------------------------------------------------------------------------
    Какие модификаторы доступа можно использовать для внешнего класса?
        - default, protected, public
        - public, protected
        - public, default
        - public, private
//----------------------------------------------------------------------------------------------------
    Подклассом класса IOException является
        - NullPointerException
        - Exception
        - RuntimeException
        - FileNotFoundException
*/
}
